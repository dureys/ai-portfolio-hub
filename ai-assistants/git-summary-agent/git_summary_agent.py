"""
🤖 Git Summary Agent - Your First AI Assistant

Purpose: Automatically summarize git progress and update documentation
Trigger: Manual command or scheduled
Output: Updated README files + professional commit ready for approval
"""

import os
import subprocess
import json
import datetime
from pathlib import Path

class GitSummaryAgent:
    def __init__(self, repo_path="."):
        self.repo_path = Path(repo_path)
        self.session_file = self.repo_path / ".ai-sessions" / "session_log.json"
        self.last_summary_file = self.repo_path / ".ai-sessions" / "last_summary.txt"
        
    def get_commits_since_last_summary(self):
        """Get all commits since last agent summary"""
        try:
            # Get last summary timestamp
            if self.last_summary_file.exists():
                with open(self.last_summary_file, 'r') as f:
                    last_summary = f.read().strip()
            else:
                # If no previous summary, get last 10 commits
                last_summary = "HEAD~10"
            
            # Get commit messages
            result = subprocess.run([
                'git', 'log', f'{last_summary}..HEAD', 
                '--pretty=format:%h|%s|%ad', '--date=short'
            ], capture_output=True, text=True, cwd=self.repo_path)
            
            commits = []
            for line in result.stdout.split('\n'):
                if line.strip():
                    hash_val, message, date = line.split('|', 2)
                    commits.append({
                        'hash': hash_val,
                        'message': message,
                        'date': date
                    })
            
            return commits
            
        except Exception as e:
            print(f"Error getting commits: {e}")
            return []
    
    def analyze_progress(self, commits):
        """Analyze what was accomplished based on commits"""
        if not commits:
            return "No new commits to analyze."
        
        # Categories of work
        completed_tasks = []
        in_progress = []
        new_features = []
        fixes = []
        
        for commit in commits:
            msg = commit['message'].lower()
            
            if '✅' in commit['message'] or 'complete' in msg:
                completed_tasks.append(commit['message'])
            elif '🔄' in commit['message'] or 'wip' in msg or 'progress' in msg:
                in_progress.append(commit['message'])
            elif '✨' in commit['message'] or 'add' in msg or 'create' in msg:
                new_features.append(commit['message'])
            elif '🐛' in commit['message'] or 'fix' in msg:
                fixes.append(commit['message'])
        
        analysis = {
            'completed_tasks': completed_tasks,
            'in_progress': in_progress,
            'new_features': new_features,
            'fixes': fixes,
            'total_commits': len(commits),
            'date_range': f"{commits[-1]['date']} to {commits[0]['date']}"
        }
        
        return analysis
    
    def generate_session_summary(self, analysis):
        """Generate human-readable session summary"""
        summary = f"""# 🤖 Session Summary - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}

## Progress Overview
- **Total Commits**: {analysis['total_commits']}
- **Date Range**: {analysis['date_range']}

## Completed Tasks ✅
"""
        
        for task in analysis['completed_tasks']:
            summary += f"- {task}\n"
        
        if analysis['new_features']:
            summary += f"\n## New Features ✨\n"
            for feature in analysis['new_features']:
                summary += f"- {feature}\n"
        
        if analysis['in_progress']:
            summary += f"\n## In Progress 🔄\n"
            for item in analysis['in_progress']:
                summary += f"- {item}\n"
        
        if analysis['fixes']:
            summary += f"\n## Fixes 🐛\n"
            for fix in analysis['fixes']:
                summary += f"- {fix}\n"
        
        summary += f"""
## Next Session Priority
Based on recent commits, continue with: [AGENT WILL ANALYZE PATTERN]

---
*Generated by Git Summary Agent*
"""
        
        return summary
    
    def update_context_files(self, analysis, summary):
        """Update AI context files with latest progress"""
        
        # Update current-state.md
        current_state = f"""# 🤖 AI SESSION STATE - Updated by Git Summary Agent

## Last Updated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## RECENT PROGRESS SUMMARY
{summary}

## ENVIRONMENT STATUS ✅
- Local AI: GPU acceleration working
- Repository: Professional structure maintained
- Automation: Git Summary Agent active
- Development: Ready for next session

## COLLABORATION STATUS
- GitHub: Up to date with latest progress
- Documentation: Auto-updated by agent
- Context: Current for any AI model switch

## FOR NEXT AI SESSION
Review recent commits and continue from documented progress.
Agent has analyzed recent work and updated all context files.

Repository: https://github.com/dureys/ai-portfolio-hub
"""
        
        with open(self.repo_path / ".ai-sessions" / "current-state.md", 'w', encoding='utf-8') as f:
            f.write(current_state)
        
        # Update AI_CONTEXT.md
        public_context = f"""# AI Development Context - Auto-Updated

## 🤖 Latest Session Summary
{summary}

## Project Status
Professional AI portfolio development with automated progress tracking.

## Recent Activity
- **Commits Analyzed**: {analysis['total_commits']}
- **Last Updated**: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}
- **Auto-Documentation**: Git Summary Agent active

## Ready for Development
Environment complete, progress tracked, ready for next AI collaboration session.

Repository: https://github.com/dureys/ai-portfolio-hub
"""
        
        with open(self.repo_path / "AI_CONTEXT.md", 'w', encoding='utf-8') as f:
            f.write(public_context)
    
    def create_summary_commit(self, summary):
        """Create a commit with the session summary (for approval)"""
        
        # Save summary to file
        summary_file = self.repo_path / ".ai-sessions" / f"summary_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.md"
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(summary)
        
        # Update last summary timestamp
        with open(self.last_summary_file, 'w') as f:
            f.write("HEAD")
        
        # Stage changes
        subprocess.run(['git', 'add', '.'], cwd=self.repo_path)
        
        # Create commit message
        commit_msg = f"🤖 AUTO-SUMMARY: Git Summary Agent session analysis - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        print(f"Commit prepared: {commit_msg}")
        print("Files updated:")
        print("- AI_CONTEXT.md")
        print("- .ai-sessions/current-state.md")
        print(f"- .ai-sessions/summary_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.md")
        print("\nRun 'git commit' to approve, or 'git reset' to cancel")
        
        return commit_msg
    
    def run_analysis(self):
        """Main function: analyze commits and update documentation"""
        print("🤖 Git Summary Agent Starting...")
        
        # Get recent commits
        commits = self.get_commits_since_last_summary()
        if not commits:
            print("No new commits to analyze.")
            return
        
        print(f"Found {len(commits)} commits to analyze...")
        
        # Analyze progress
        analysis = self.analyze_progress(commits)
        
        # Generate summary
        summary = self.generate_session_summary(analysis)
        
        # Update context files
        self.update_context_files(analysis, summary)
        
        # Prepare commit
        commit_msg = self.create_summary_commit(summary)
        
        print("✅ Git Summary Agent Complete!")
        print("Review changes and approve commit when ready.")

if __name__ == "__main__":
    agent = GitSummaryAgent()
    agent.run_analysis()
